//const { PERMALINKS } = require('../../config/constants');

const { JwtRequestError, IncompleteJwtResponseError } = require('./jwt_errors');

function support(error, logger, level) {
    const { diagnosis, shortMessage, support, permalink, throwable } = error;
    const capireReference = permalink ? `Find more information here: ${permalink}` : "";
    const message = [diagnosis, support, capireReference].filter(c => !!c).join("\n");
    if (message) {
        logger[level || 'error'](message);
    }
    return throwable && throwable(shortMessage || diagnosis);
}
const ERRORS = Object.freeze({
    hanaCredentialsMissing: {
        diagnosis: `Managed HANA service credentials not found.`,
        shortMessage: `HANA credentials not found`,
        support: `Deploy your HANA database using 'cds deploy --to hana.'`,
        //permalink: PERMALINKS.CDS_DEPLOY_HANA,
        throwable: (message) => new Error(message)
    },
    hanaServiceMissing: {
        diagnosis: `HANA service not provided in CDS requirements.`,
        shortMessage: `HANA credentials not found`,
        support: `Add 'hana' to 'cds.requires.db' in your package.json or .cdsrc.json.'`,
        //permalink: PERMALINKS.DEPLOY_AS_MULTITENANT,
        throwable: (message) => new Error(message)
    },
    bindingMissing: (service) => ({
        diagnosis: `The ${service} credentials couldn't be found as the '${service}' requirement is missing in the CDS configuration.`
        //permalink: PERMALINKS.MULTITENANCY_CONFIGURATION,
    }),
    bindingNotKind: (service, kind) => ({
        diagnosis: `The auth credentials couldn't be read as the '${service}' requirement in the CDS configuration has to be of type '${kind}'.`
        //permalink: PERMALINKS.MULTITENANCY_CONFIGURATION,
    }),
    jwtOptionalScopesMissing: {
        diagnosis: `JWT request failed: optional scopes missing. Retrying without these scopes.`
    },
    jwtRequestFailed: (error, response) => ({
        diagnosis: `JWT request failed: ${(error || response && response.error_description)}`,
        throwable: (message) => new JwtRequestError(message, response)
    }),
    jwtIncompleteResponse: (response) => ({
        diagnosis: `Incomplete JWT response: access token missing`,
        throwable: (message) => new IncompleteJwtResponseError(message, response)
    }),
    jwtMalformedResponse: (responseString) => ({
        diagnosis: `JWT request failed: malformed response: ${responseString}`,
        shortMessage: `JWT request failed: malformed response`,
        throwable: (message) => new Error(message)
    })
})

module.exports = { support, ERRORS }
