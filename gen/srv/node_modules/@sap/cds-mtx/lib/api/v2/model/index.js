const cds = require('@sap/cds');
const path = require('path');
const Logger = require('../../../helper/logger');
const logger = Logger('MODEL_PROVIDER');
const Toggles = require('./toggles');
const HttpHelper = require('../../../helper/http_helper');
const Basemodel = require('../../../data/tenant_metadata/basemodel');

/**
 * Preliminary implementation
 * - uses base model from disk
 * - no extensions
 * @returns {Function}
 */

module.exports = () => function () {

    function _isSource(filename) {
        return /.*\.(cds|csn)$/.test(filename) && !filename.includes('node_modules');
    }

    async function getCsn(context) {
        const features = context.data.toggles;
        const basemodel = await Basemodel.getInstance();

        // implement feature filter logic here
        const fixedFileSet = Toggles
            .filterFeatures(Array.from(basemodel.sourceFiles.keys()), features)
            .filter(_isSource)
            .map(relativePath => path.join(basemodel.rootPath, relativePath));
        logger.log(fixedFileSet);

        const csn = await cds.load(fixedFileSet);
        return cds.compile.for.odata(csn);
    }

    this.on('csn', async (context) => {
        HttpHelper.checkMetadataScopeAndRespond(context);
        const csn = await getCsn(context);
        return context.reply(csn);
    });

    this.on('edmx', async (context) => {
        HttpHelper.checkMetadataScopeAndRespond(context);
        const { odataVersion: version, locale, service } = context.data;
        const csn = await getCsn(context);
        const options = { version /* v2|v4 */, service }
        const edmx = await cds.compile.to.edmx(csn, options);
        return cds.localize(csn, locale, edmx);
    });
}
