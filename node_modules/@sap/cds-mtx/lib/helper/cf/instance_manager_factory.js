const { promisify } = require('util');
const createInstanceManager = promisify(require('@sap/instance-manager').create);
const migrationSupport = require('@sap/instance-manager').hasMigrationSupport;
const { support, ERRORS } = require('../../errors/supportability');
const Logger = require('../../helper/logger');
const cds = require('@sap/cds');

let _instanceManager;

class InstanceManagerFactory {

    static _getServiceCredentials() {
        const cds = require('../../cds');

        if (!cds.env.requires.db) {
            const throwable = support(ERRORS.hanaServiceMissing, InstanceManagerFactory.logger);
            throw throwable;
        }

        if (!cds.env.requires.db.credentials) {
            const throwable = support(ERRORS.hanaCredentialsMissing, InstanceManagerFactory.logger);
            throw throwable;
        }

        const credentials = cds.env.requires.db.credentials;

        // add instance manager credentials if available
        // explicitly using vcap directly. This is only needed for container migration on cf
        if (cds.env.features.hybrid_instance_manager && process.env.VCAP_SERVICES) {
            const vcap = JSON.parse(process.env.VCAP_SERVICES)
            if (vcap['managed-hana'] && vcap['service-manager']) {

                if (!migrationSupport) {
                    throw new Error('Used version of @sap/instance-manager does not support binding of both managed-hana and service-manager');
                }

                InstanceManagerFactory.logger.info('Using both managed-hana and service-manager binding');

                return {
                    smOpts: vcap['service-manager'][0].credentials,
                    imOpts: vcap['managed-hana'][0].credentials
                }
            }
        }

        return credentials;
    }

    static get logger() {
        return this._logger = this._logger || Logger('INSTANCE_MANAGER_FACTORY');
    }

    static async _create() {
        let options;
        try {
            options = InstanceManagerFactory._getServiceCredentials();
        } catch (error) {
            InstanceManagerFactory.logger.error(error);
            throw new Error(`Failed to get instance manager service credentials: ${error.message}`);
        }

        options = Object.assign(options, {
            cache_max_items: 1,
            cache_item_expire_seconds: 1,
            polling_timeout_seconds: 240,
        });

        const configuredOptions = cds.env.get('mtx.provisioning.instancemanageroptions');
        if (configuredOptions) {
            options = Object.assign(options, configuredOptions);
        }

        const instanceManager = await createInstanceManager(options);
        instanceManager.create = promisify(instanceManager.create, instanceManager);
        instanceManager.delete = promisify(instanceManager.delete, instanceManager);
        instanceManager.get = promisify(instanceManager.get, instanceManager);
        instanceManager.getAll = promisify(instanceManager.getAll, instanceManager);
        _instanceManager = instanceManager;
    }

    static async get() {
        if (!_instanceManager) {
            await this._create();
        }
        return _instanceManager;
    }
}

module.exports = InstanceManagerFactory;
